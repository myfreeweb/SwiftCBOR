import XCTest
@testable import SwiftCBOR

class CBORStreamDecoderTests: XCTestCase {
    static var allTests = [
        ("testDecodeNumbers", testDecodeNumbers),
        ("testDecodeByteStrings", testDecodeByteStrings),
        ("testDecodeUtf8Strings", testDecodeUtf8Strings),
        ("testDecodeArrays", testDecodeArrays),
        ("testDecodeMaps", testDecodeMaps),
        ("testDecodeTagged", testDecodeTagged),
        ("testDecodeSimple", testDecodeSimple),
        ("testDecodeFloats", testDecodeFloats),
        ("testDecodePerformance", testDecodePerformance),
        ("testDecodeMapFromIssue29", testDecodeMapFromIssue29),
    ]

    func decode(_ bytes: UInt8...) throws -> CBOR {
        return try decode(Data(bytes))
    }

    func decode(_ data: Data) throws -> CBOR {
        return try CBORStreamDecoder(stream: CBORDataStream(data: data)).decodeRequiredItem()
    }

    func testDecodeNumbers() {
        for i in (0..<24) {
            XCTAssertEqual(try decode(UInt8(i)), .unsignedInt(UInt64(i)))
        }
        XCTAssertEqual(try decode(0x18, 0xff), 255)
        XCTAssertEqual(try decode(0x19, 0x03, 0xe8), 1000) // Network byte order!
        XCTAssertEqual(try decode(0x19, 0xff, 0xff), 65535)
        XCTAssertThrowsError(try decode(0x19, 0xff))
        XCTAssertEqual(try decode(0x1a, 0x00, 0x0f, 0x42, 0x40), 1000000)
        XCTAssertEqual(try decode(0x1a, 0xff, 0xff, 0xff, 0xff), 4294967295)
        XCTAssertThrowsError(try decode(0x1a))
        XCTAssertEqual(try decode(0x1b, 0x00, 0x00, 0x00, 0xe8, 0xd4, 0xa5, 0x10, 0x00), 1000000000000)
        XCTAssertEqual(try decode(0x1b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff), .unsignedInt(18446744073709551615))
        XCTAssertThrowsError(try decode(0x1b, 0x00, 0x00))

        XCTAssertEqual(try decode(0x20), -1)
        XCTAssertEqual(try decode(0x21), .negativeInt(1))
        XCTAssertEqual(try decode(0x37), -24)
        XCTAssertEqual(try decode(0x38, 0xff), -256)
        XCTAssertEqual(try decode(0x39, 0x03, 0xe7), -1000)
        XCTAssertEqual(try decode(0x3a, 0x00, 0x0f, 0x42, 0x3f), .negativeInt(999999))
        XCTAssertEqual(try decode(0x3b, 0x00, 0x00, 0x00, 0xe8, 0xd4, 0xa5, 0x0f, 0xff), .negativeInt(999999999999))
    }

    func testDecodeByteStrings() {
        XCTAssertEqual(try decode(0x40), .byteString(Data()))
        XCTAssertEqual(try decode(0x41, 0xf0), .byteString(Data([0xf0])))
        XCTAssertEqual(try decode(0x57, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xaa),
                       .byteString(Data([0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xaa])))
        XCTAssertEqual(try decode(0x58, 0), .byteString(Data()))
        XCTAssertEqual(try decode(0x58, 1, 0xf0), .byteString(Data([0xf0])))
        XCTAssertEqual(try decode(0x59, 0x00, 3, 0xc0, 0xff, 0xee), .byteString(Data([0xc0, 0xff, 0xee])))
        XCTAssertEqual(try decode(0x5a, 0x00, 0x00, 0x00, 3, 0xc0, 0xff, 0xee), .byteString(Data([0xc0, 0xff, 0xee])))
        XCTAssertEqual(try decode(0x5b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 3, 0xc0, 0xff, 0xee), .byteString(Data([0xc0, 0xff, 0xee])))
        XCTAssertEqual(try decode(0x5f, 0x58, 3, 0xc0, 0xff, 0xee, 0x43, 0xc0, 0xff, 0xee, 0xff), .byteString(Data([0xc0, 0xff, 0xee, 0xc0, 0xff, 0xee])))
    }
    
    func testDecodeData() {
        XCTAssertEqual(try decode(0x40), .byteString(Data()))
        XCTAssertEqual(try decode(0x41, 0xf0), .byteString(Data([0xf0])))
        XCTAssertEqual(try decode(0x57, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xaa),
                       .byteString(Data([0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xaa])))
        XCTAssertEqual(try decode(0x58, 0), .byteString(Data()))
        XCTAssertEqual(try decode(0x58, 1, 0xf0), .byteString(Data([0xf0])))
        XCTAssertEqual(try decode(0x59, 0x00, 3, 0xc0, 0xff, 0xee), .byteString(Data([0xc0, 0xff, 0xee])))
        XCTAssertEqual(try decode(0x5a, 0x00, 0x00, 0x00, 3, 0xc0, 0xff, 0xee), .byteString(Data([0xc0, 0xff, 0xee])))
        XCTAssertEqual(try decode(0x5b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 3, 0xc0, 0xff, 0xee), .byteString(Data([0xc0, 0xff, 0xee])))
        XCTAssertEqual(try decode(0x5f, 0x58, 3, 0xc0, 0xff, 0xee, 0x43, 0xc0, 0xff, 0xee, 0xff), .byteString(Data([0xc0, 0xff, 0xee, 0xc0, 0xff, 0xee])))
    }

    func testDecodeUtf8Strings() {
        XCTAssertEqual(try decode(0x60), .utf8String(""))
        XCTAssertEqual(try decode(0x61, 0x42), "B")
        XCTAssertEqual(try decode(0x78, 0), "")
        XCTAssertEqual(try decode(0x78, 1, 0x42), "B")
        XCTAssertEqual(try decode(0x79, 0x00, 3, 0x41, 0x42, 0x43), .utf8String("ABC"))
        XCTAssertEqual(try decode(0x7a, 0x00, 0x00, 0x00, 3, 0x41, 0x42, 0x43), "ABC")
        XCTAssertEqual(try decode(0x7b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 3, 0x41, 0x42, 0x43), "ABC")
        XCTAssertEqual(try decode(0x7f, 0x78, 3, 0x41, 0x42, 0x43, 0x63, 0x41, 0x42, 0x43, 0xff), "ABCABC")
    }

    func testDecodeArrays() {
        XCTAssertEqual(try decode(0x80), [])
        XCTAssertEqual(try decode(0x82, 0x18, 1, 0x79, 0x00, 3, 0x41, 0x42, 0x43), [1, "ABC"])
        XCTAssertEqual(try decode(0x98, 0), [])
        XCTAssertEqual(try decode(0x98, 3, 0x18, 2, 0x18, 2, 0x79, 0x00, 3, 0x41, 0x42, 0x43, 0xff), [2, 2, "ABC"])
        XCTAssertEqual(try decode(0x9f, 0x18, 255, 0x9b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 2, 0x18, 1, 0x79, 0x00, 3, 0x41, 0x42, 0x43, 0x79, 0x00, 3, 0x41, 0x42, 0x43, 0xff), [255, [1, "ABC"], "ABC"])
        XCTAssertEqual(try decode(0x9f, 0x81, 0x01, 0x82, 0x02, 0x03, 0x9f, 0x04, 0x05, 0xff, 0xff), [[1], [2, 3], [4, 5]])
    }

    func testDecodeMaps() {
        XCTAssertEqual(try decode(0xa0), [:])
        XCTAssertEqual(try decode(0xa1, 0x63, 0x6b, 0x65, 0x79, 0x37)["key"], -24)
        XCTAssertEqual(try decode(0xb8, 1, 0x63, 0x6b, 0x65, 0x79, 0x81, 0x37), ["key" : [-24]])
        XCTAssertEqual(try decode(0xbf, 0x63, 0x6b, 0x65, 0x79, 0xa1, 0x63, 0x6b, 0x65, 0x79, 0x37, 0xff), ["key" : ["key" : -24]])
    }

    func testDecodeTagged() {
        XCTAssertEqual(try decode(0xc0, 0x79, 0x00, 3, 0x41, 0x42, 0x43), .tagged(.iso8601DateTime, "ABC"))
        XCTAssertEqual(try decode(0xd8, 255, 0x79, 0x00, 3, 0x41, 0x42, 0x43), .tagged(.init(rawValue: 255), "ABC"))
        XCTAssertEqual(try decode(0xdb, 255, 255, 255, 255, 255, 255, 255, 255, 0x79, 0x00, 3, 0x41, 0x42, 0x43), .tagged(.init(rawValue: UInt64.max), "ABC"))
        XCTAssertEqual(try decode(0xdb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 3, 0xbf, 0x63, 0x6b, 0x65, 0x79, 0xa1, 0x63, 0x6b, 0x65, 0x79, 0x37, 0xff), .tagged(.negativeBignum, ["key" : ["key" : -24]]))
    }

    func testDecodeSimple() {
        XCTAssertEqual(try decode(0xe0), .simple(0))
        XCTAssertEqual(try decode(0xf3), .simple(19))
        XCTAssertEqual(try decode(0xf8, 19), .simple(19))
        XCTAssertEqual(try decode(0xf4), false)
        XCTAssertEqual(try decode(0xf5), true)
        XCTAssertEqual(try decode(0xf6), .null)
        XCTAssertEqual(try decode(0xf7), .undefined)
    }

    func testDecodeFloats() {
        XCTAssertEqual(try decode(0xf9, 0xc4, 0x00), .half(-4.0))
        XCTAssertEqual(try decode(0xf9, 0xfc, 0x00), .half(Half(-Float.infinity)))
        XCTAssertEqual(try decode(0xfa, 0x47, 0xc3, 0x50, 0x00), .float(100000.0))
        XCTAssertEqual(try decode(0xfa, 0x7f, 0x80, 0x00, 0x00), .float(Float.infinity))
        XCTAssertEqual(try decode(0xfb, 0xc0, 0x10, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66), .double(-4.1))
    }
//
//    func testDecodeDates() {
//        let dateOne = Date(timeIntervalSince1970: 1363896240)
//        XCTAssertEqual(try decode(0xc1, 0x1a, 0x51, 0x4b, 0x67, 0xb0), .date(dateOne))
//        let dateTwo = Date(timeIntervalSince1970: 1363896240.5)
//        XCTAssertEqual(try decode(0xc1, 0xfb, 0x41, 0xd4, 0x52, 0xd9, 0xec, 0x20, 0x00, 0x00), .date(dateTwo))
//    }

    func testDecodePerformance() {
        var data = Data([0x9f])
        for i in (0..<255) {
            data.append(contentsOf: [0xbf, 0x63, 0x6b, 0x65, 0x79, 0xa1, 0x63, 0x6b, 0x65, 0x79, 0x18, UInt8(i), 0xff])
        }
        data.append(0xff)
        self.measure {
            _ = try! decode(data)
        }
    }

    func testDecodeMapFromIssue29() {
        let loremIpsumData = Data([0x4c, 0x6f, 0x72, 0x65, 0x6d, 0x20, 0x69, 0x70, 0x73, 0x75, 0x6d, 0x20, 0x64, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x73, 0x69, 0x74, 0x20, 0x61, 0x6d, 0x65, 0x74, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x74, 0x65, 0x74, 0x75, 0x72, 0x20, 0x61, 0x64, 0x69, 0x70, 0x69, 0x73, 0x63, 0x69, 0x6e, 0x67, 0x20, 0x65, 0x6c, 0x69, 0x74, 0x2e, 0x20, 0x51, 0x75, 0x69, 0x73, 0x71, 0x75, 0x65, 0x20, 0x65, 0x78, 0x20, 0x61, 0x6e, 0x74, 0x65, 0x2c, 0x20, 0x73, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x20, 0x75, 0x74, 0x20, 0x66, 0x61, 0x75, 0x63, 0x69, 0x62, 0x75, 0x73, 0x20, 0x70, 0x68, 0x61, 0x72, 0x65, 0x74, 0x72, 0x61, 0x2c, 0x20, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x73, 0x61, 0x6e, 0x20, 0x65, 0x74, 0x20, 0x61, 0x75, 0x67, 0x75, 0x65, 0x2e, 0x20, 0x56, 0x65, 0x73, 0x74, 0x69, 0x62, 0x75, 0x6c, 0x75, 0x6d, 0x20, 0x76, 0x75, 0x6c, 0x70, 0x75, 0x74, 0x61, 0x74, 0x65, 0x20, 0x65, 0x6c, 0x69, 0x74, 0x20, 0x6c, 0x69, 0x67, 0x75, 0x6c, 0x61, 0x2c, 0x20, 0x65, 0x75, 0x20, 0x74, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x75, 0x6e, 0x74, 0x20, 0x6f, 0x72, 0x63, 0x69, 0x20, 0x6c, 0x61, 0x63, 0x69, 0x6e, 0x69, 0x61, 0x20, 0x71, 0x75, 0x69, 0x73, 0x2e, 0x20, 0x50, 0x72, 0x6f, 0x69, 0x6e, 0x20, 0x73, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x69, 0x73, 0x71, 0x75, 0x65, 0x20, 0x64, 0x75, 0x69, 0x20, 0x61, 0x74, 0x20, 0x6d, 0x61, 0x67, 0x6e, 0x61, 0x20, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x61, 0x74, 0x2c, 0x20, 0x69, 0x64, 0x20, 0x62, 0x6c, 0x61, 0x6e, 0x64, 0x69, 0x74, 0x20, 0x66, 0x65, 0x6c, 0x69, 0x73, 0x20, 0x76, 0x65, 0x68, 0x69, 0x63, 0x75, 0x6c, 0x61, 0x2e, 0x20, 0x4d, 0x61, 0x65, 0x63, 0x65, 0x6e, 0x61, 0x73, 0x20, 0x61, 0x63, 0x20, 0x6e, 0x69, 0x73, 0x6c, 0x20, 0x61, 0x20, 0x6f, 0x64, 0x69, 0x6f, 0x20, 0x76, 0x61, 0x72, 0x69, 0x75, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x75, 0x6d, 0x20, 0x6c])
        let data = Data([0xbf, 0x63, 0x6f, 0x66, 0x66, 0x00, 0x64, 0x64, 0x61, 0x74, 0x61, 0x59, 0x01, 0x2c] + loremIpsumData + [0x62, 0x72, 0x63, 0x00, 0x63, 0x6c, 0x65, 0x6e, 0x19, 0x01, 0x2c, 0xff])

        let expectedMap = CBOR.map([
            .utf8String("off"): .unsignedInt(0),
            .utf8String("data"): .byteString(loremIpsumData),
            .utf8String("rc"): .unsignedInt(0),
            .utf8String("len"): .unsignedInt(300)
        ])

        XCTAssertEqual(try decode(data), expectedMap)
    }
}
